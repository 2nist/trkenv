name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [ '3.10', '3.11', '3.12' ]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            apps/server/requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f apps/server/requirements.txt ]; then pip install -r apps/server/requirements.txt; fi

      - name: Install test extras (coverage)
        run: |
          pip install pytest-cov

      - name: Run tests with coverage
        run: |
          python -m pytest -q --cov=apps --cov=services --cov=scripts \
            --cov-report=xml --cov-report=html

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}-py${{ matrix.python-version }}
          path: |
            coverage.xml
            htmlcov/

  smoke:
    needs: tests
    timeout-minutes: 15
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            apps/server/requirements.txt

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f apps/server/requirements.txt ]; then pip install -r apps/server/requirements.txt; fi

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f apps/server/requirements.txt ]; then pip install -r apps/server/requirements.txt; fi

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          if (Test-Path requirements.txt) { pip install -r requirements.txt }
          if (Test-Path apps/server/requirements.txt) { pip install -r apps/server/requirements.txt }

      - name: Create 1s WAV sample
        shell: bash
        run: |
          python - << 'PY'
          import wave, struct, math
          fr=44100; dur=1.0; freq=440.0
          n=int(fr*dur)
          with wave.open('sample.wav','w') as w:
              w.setnchannels(1); w.setsampwidth(2); w.setframerate(fr)
              for i in range(n):
                  t=i/fr
                  s=int(32767*0.2*math.sin(2*math.pi*freq*t))
                  w.writeframes(struct.pack('<h', s))
          PY

      - name: Start server (Linux)
        if: runner.os == 'Linux'
        working-directory: apps/server
        run: |
          nohup python -m uvicorn main:app --host 127.0.0.1 --port 8000 > uvicorn.log 2>&1 &
          echo $! > uvicorn.pid

      - name: Start server (Windows)
        if: runner.os == 'Windows'
        working-directory: apps/server
        shell: pwsh
        run: |
          $p = Start-Process -FilePath python -ArgumentList @("-m","uvicorn","main:app","--host","127.0.0.1","--port","8000") -RedirectStandardOutput uvicorn.log -RedirectStandardError uvicorn.log -PassThru
          $p.Id | Out-File -FilePath uvicorn.pid -NoNewline

      - name: Start server (macOS)
        if: runner.os == 'macOS'
        working-directory: apps/server
        run: |
          nohup python -m uvicorn main:app --host 127.0.0.1 --port 8000 > uvicorn.log 2>&1 &
          echo $! > uvicorn.pid

      - name: Wait for health (Linux)
        if: runner.os == 'Linux'
        run: |
          for i in {1..60}; do
            if curl -sf http://127.0.0.1:8000/api/health > /dev/null; then exit 0; fi
            sleep 1
          done
          echo "server did not become healthy"; exit 1

      - name: Wait for health (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $deadline = (Get-Date).AddSeconds(60)
          $ok = $false
          while((Get-Date) -lt $deadline){
            try {
              $r = Invoke-RestMethod http://127.0.0.1:8000/api/health -TimeoutSec 2
              if($r.ok){ $ok = $true; break }
            } catch {}
            Start-Sleep -Seconds 1
          }
          if(-not $ok){ throw "server did not become healthy" }

      - name: Wait for health (macOS)
        if: runner.os == 'macOS'
        run: |
          for i in {1..60}; do
            if curl -sf http://127.0.0.1:8000/api/health > /dev/null; then exit 0; fi
            sleep 1
          done
          echo "server did not become healthy"; exit 1

      - name: Run smoke (Linux)
        if: runner.os == 'Linux'
        run: |
          AUDIO_URI=$(python - << 'PY'
          from pathlib import Path
          print(Path('sample.wav').resolve().as_uri())
          PY
          )
          python scripts/smoke_api.py --base http://127.0.0.1:8000 --audio "$AUDIO_URI"

      - name: Run smoke (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $AUDIO_URI = (python - << 'PY'
          from pathlib import Path
          print(Path('sample.wav').resolve().as_uri())
          PY
          ).Trim()
          python scripts/smoke_api.py --base http://127.0.0.1:8000 --audio $AUDIO_URI

      - name: Run smoke (macOS)
        if: runner.os == 'macOS'
        run: |
          AUDIO_URI=$(python - << 'PY'
          from pathlib import Path
          print(Path('sample.wav').resolve().as_uri())
          PY
          )
          python scripts/smoke_api.py --base http://127.0.0.1:8000 --audio "$AUDIO_URI"

      - name: Stop server (Linux)
        if: always() && runner.os == 'Linux'
        working-directory: apps/server
        run: |
          if [ -f uvicorn.pid ]; then kill $(cat uvicorn.pid) || true; fi

      - name: Upload server log (Linux, on failure)
        if: failure() && runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: uvicorn-log-linux
          path: apps/server/uvicorn.log

      - name: Stop server (Windows)
        if: always() && runner.os == 'Windows'
        working-directory: apps/server
        shell: pwsh
        run: |
          if (Test-Path uvicorn.pid) { $pid = Get-Content uvicorn.pid; if($pid){ try { Stop-Process -Id $pid -Force } catch {} } }

      - name: Upload server log (Windows, on failure)
        if: failure() && runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: uvicorn-log-windows
          path: apps/server/uvicorn.log

      - name: Stop server (macOS)
        if: always() && runner.os == 'macOS'
        working-directory: apps/server
        run: |
          if [ -f uvicorn.pid ]; then kill $(cat uvicorn.pid) || true; fi

      - name: Upload server log (macOS, on failure)
        if: failure() && runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: uvicorn-log-macos
          path: apps/server/uvicorn.log
